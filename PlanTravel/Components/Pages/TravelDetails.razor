@page "/travel/{TripId}"
@using PlanTravel.Components.Layout
@inject IJSRuntime JS
@inject HttpClient Http
@layout SubLayout

<div class="container container-blur">

    @if (trip == null)
    {
        <p>Ładowanie...</p>
    }
    else
    {
        <h3 class="mt-4 mb-4">
            @trip.Name <span class="badge bg-secondary">@trip.Theme</span>
        </h3>

        @foreach (var loc in locations.Select((value, index) => new { value, index }))
        {
            <div class="card mb-4 bg-light border-0">


                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <h5 class="card-title">@loc.value.name</h5>
                        <button class="btn-close" @onclick="@(() => RemoveLocation(loc.index))" aria-label="Usuń"></button>
                    </div>
                    <p class="card-text">@loc.value.description</p>
                    @if (!string.IsNullOrEmpty(loc.value.image))
                    {
                        <img src="@loc.value.image" alt="Obraz lokalizacji" class="card-img-top mb-4" style="object-fit: cover; height: 200px;" />
                    }
                    <a href="@loc.value.maps_url" class="btn btn-primary rounded-pill mb-2" target="_blank">
                        Zobacz na mapie
                    </a>
                </div>
            </div>

        }

        @if (locations.Count < 10)
        {
            <div class="text-center my-4">
                <button class="btn text-primary px-4 py-2" style="font-size: 1.3rem;"
                        @onclick="AddLocation" disabled="@isAdding">
                    @if (isAdding)
                    {
                        <span>Generuje...</span>
                    }
                    else
                    {
                        <i class="bi bi-plus-circle me-1" style="font-size: 2rem;"></i>
                    }
                </button>
            </div>
        }
        else
        {
            <div class="alert alert-warning text-center my-4">
                Osiągnięto maksymalną liczbę 10 lokalizacji.
            </div>
        }
    }
</div>

@code {
    [Parameter] public string TripId { get; set; }

    private Trip trip;
    private List<Location> locations = new();
    private bool isAdding = false;

    public class Trip
    {
        public string Id { get; set; }
        public string Name { get; set; }
        public string Theme { get; set; }
        public string LocationsJson { get; set; }
    }

    public class Location
    {
        public string name { get; set; }
        public string description { get; set; }
        public string location { get; set; }
        public string maps_url { get; set; }
        public string image { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadTrip();
    }

    private async Task LoadTrip()
    {
        var json = await JS.InvokeAsync<string>("localStorage.getItem", "trips");
        if (string.IsNullOrEmpty(json)) return;

        var allTrips = System.Text.Json.JsonSerializer.Deserialize<List<Trip>>(json);
        trip = allTrips?.FirstOrDefault(t => t.Id == TripId);

        if (trip != null && !string.IsNullOrEmpty(trip.LocationsJson))
        {
            locations = System.Text.Json.JsonSerializer.Deserialize<List<Location>>(trip.LocationsJson);
        }
    }

    private async Task SaveTrip()
    {
        trip.LocationsJson = System.Text.Json.JsonSerializer.Serialize(locations);

        var json = await JS.InvokeAsync<string>("localStorage.getItem", "trips");
        var allTrips = System.Text.Json.JsonSerializer.Deserialize<List<Trip>>(json);

        var index = allTrips.FindIndex(t => t.Id == TripId);
        if (index >= 0)
        {
            allTrips[index] = trip;
            var newJson = System.Text.Json.JsonSerializer.Serialize(allTrips);
            await JS.InvokeVoidAsync("localStorage.setItem", "trips", newJson);
        }
    }

    private async Task RemoveLocation(int index)
    {
        if (index >= 0 && index < locations.Count)
        {
            locations.RemoveAt(index);
            await SaveTrip();
        }
    }

    private async Task AddLocation()
    {
        isAdding = true;

        var excludedNames = locations.Select(l => l.name).ToList();

        var payload = new
        {
            location = trip.Name,
            radiusKm = 30,
            count = 1,
            theme = trip.Theme,
            exclude = excludedNames
        };

        try
        {
            var response = await Http.PostAsJsonAsync("https://api.neteeo.com/extratravel/plan", payload);
            response.EnsureSuccessStatusCode();
            var content = await response.Content.ReadAsStringAsync();

            var newLocs = System.Text.Json.JsonSerializer.Deserialize<List<Location>>(content);
            if (newLocs?.Any() == true)
            {
                locations.Add(newLocs.First());
                await SaveTrip();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Błąd przy dodawaniu lokalizacji: " + ex.Message);
        }
        finally
        {
            isAdding = false;
        }
    }

}
